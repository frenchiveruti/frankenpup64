#!/bin/sh
##########################################################################################
# By Diego Cardenas "The Samedog" under GNU GENERAL PUBLIC LICENSE Version 2, June 1991
# (www.gnu.org/licenses/old-licenses/gpl-2.0.html) e-mail: the.samedog[]gmail.com.
# https://github.com/samedog/frankenpup64
##########################################################################################
#
# ALL OF MY CODE COMMENTS ARE NOT SAFE FOR WORK
# THIS SCRIPT IS BAD, AND I SHOULD FEEL BAD ABOUT IT, IT'S JUST SOME HALF-ASS "IFS" AND 
# "ELSES" PUT IN A WAY THEY "KINDA" WORK MOST OF THE REAL WORK IS DONE BY THE SCRIPTS 
# IN THE SFS UPDATES
##########################################################################################
#
# This system is in a very pimitive status, it "just works" for now, i'm planning to add
# better support for frugal installs and live versions but first i gotta make sure the 
# critical parts of it work, the PUPMODES for now are only for reference and i'll use 
# them on the next versions to be able to patch live usb or frugal install SFS files and
# the initrd if needed.
#
# 18-11-2019: - First version can dowload and apply new files/deltas to running system
#               regardless of PUPMODE (see below)
# 18-11-2019: - Path and LD_LIBRARY_PATH redeclare
##########################################################################################

VERSION="0.1.0"

VER=$(cat /etc/DISTRO_SPECS | grep "DISTRO_VERSION" | cut -d'=' -f2)

function check_pupmode(){
    #Pupmode	
	#PUPMODE 02 : full install
	#PUPMODE 03 : full install, flash drive
	#PUPMODE 05 : first boot [or pfix=ram]
	#PUPMODE 06 : pup_save is a partition
	#PUPMODE 07 : ditto, but flash drive
	#PUPMODE 12 : normal running puppy
	#PUPMODE 13 : ditto, but flash drive
	#PUPMODE 77 : multisession cd/dvd [13+64]
	PUP_MODE=$(cat /etc/rc.d/PUPSTATE | grep PUPMODE | cut -d'=' -f2)
	if [ $PUP_MODE -eq "2" ];then
		retval="FULL INSTALL"
	elif [ $PUP_MODE -eq "3" ];then
		retval="FULL INSTALL ON FLASH DRIVE"
	elif [ $PUP_MODE -eq "5" ];then
		retval="FIRST BOOT OR pfix=ram"
	elif [ $PUP_MODE -eq "6" ];then
		retval="PUP_SAVE ON A PARTITION"
	elif [ $PUP_MODE -eq "7" ];then
		retval="PUP_SAVE ON A FLASH DRIVE"
	elif [ $PUP_MODE -eq "12" ];then
		retval="FRUGAL"
	elif [ $PUP_MODE -eq "13" ];then
		retval="FRUGAL ON FLASH DRIVE"
	elif [ $PUP_MODE -eq "77" ];then
		retval="MULTISESSION CD/DVD"
	fi
	
}

check_updates(){
	check_pupmode
	echo "System is running Frankenpup: " $VER " on a " $retval
	wget https://raw.githubusercontent.com/samedog/frankenpup64/master/packages_db/update_index -O /tmp/update_index --no-cache --no-cookies 2>/dev/null
	UPD_FILE=$(cat /tmp/update_index)
	update_enumerate_process $UPD_FILE 
	rm -rf /tmp/update_index
}

function update_enumerate_process() {
echo "Checking for updates..."
  for val in "$@"
	do
		val_url=$(echo $val | cut -d">" -f2)
		val_name=$(echo $val_url | rev | cut -d'/' -f1 | rev)
		val=$(echo $val | cut -d">" -f1)
		ver2="${VER//.}"
		val2="${val//.}"
		if [ $val2 -gt $ver2 ];then
			echo "missing update: $val"
			echo "processing..."
			echo "downloading update $val_name"
			process_sfs $val_url $val_name
		fi
	done
}

process_sfs(){
	MNT_NAME="/mnt/$2"
	TMP_NAME="/tmp/$2"
	curl -H 'Cache-Control: no-cache' -L --progress-bar -o $TMP_NAME "$1"
	echo "Mounting squashfs..."
	mkdir $MNT_NAME
	mount -t squashfs $TMP_NAME $MNT_NAME
	cd $MNT_NAME
	echo "Checking for new files..."
	check_new_files
	echo "Checking for delta files..."
	check_deltas
	echo "Unmounting and cleaning temporal files"
	if [ -d /tmp_fs ];then
		cp -rf /tmp_fs/* /
	fi
	## we are gonna check every folder one by one (for now) to avoid any stupid problems
	if [ -d /deltafs ];then
		PATH_ORIG=$PATH
		LD_PATH_ORIG=$LD_LIBRARY_PATH
		if [ -d /deltafs/processed/usr/bin ];then
			echo "extending PATH to /deltafs/processed/usr/bin..."
			PATH=/deltafs/processed/usr/bin:$PATH
		fi
		if [ -d /deltafs/processed/usr/sbin ];then
			echo "extending PATH to /deltafs/processed/usr/sbin..."
			PATH=/deltafs/processed/usr/sbin:$PATH
		fi
		if [ -d /deltafs/processed/sbin ];then
			echo "extending PATH to /deltafs/processed/sbin..."
			PATH=/deltafs/processed/sbin:$PATH
		fi
		if [ -d /deltafs/processed/bin ];then
			echo "extending PATH to /deltafs/processed/bin..."
			PATH=/deltafs/processed/bin:$PATH
		fi
		## end common binary checks
		if [ -d /deltafs/processed/usr/lib ];then
			echo "extending LD_LIBRARY_PATH to /deltafs/processed/usr/lib..."
			LD_LIBRARY_PATH=/deltafs/processed/usr/lib:$LD_LIBRARY_PATH
		fi
		if [ -d /deltafs/processed/usr/lib64 ];then
			echo "extending LD_LIBRARY_PATH to /deltafs/processed/usr/lib64..."
			LD_LIBRARY_PATH=/deltafs/processed/usr/lib64:$LD_LIBRARY_PATH
		fi
		if [ -d /deltafs/processed/lib64 ];then
			echo "extending LD_LIBRARY_PATH to /deltafs/processed/lib64..."
			LD_LIBRARY_PATH=/deltafs/processed/lib64:$LD_LIBRARY_PATH
		fi
		if [ -d /deltafs/processed/lib ];then
			echo "extending LD_LIBRARY_PATH to /deltafs/processed/lib..."
			LD_LIBRARY_PATH=/deltafs/processed/lib:$LD_LIBRARY_PATH
		fi
		## end common lib checks
		
		echo "Applying changes to main system"

		/deltafs/processed/apply_changes
		PATH=$PATH_ORIG
		LD_LIBRARY_PATH=$LD_PATH_ORIG
	fi
	
	cd /
	umount $MNT_NAME
	rm -rf $MNT_NAME
	rm -rf $TMP_NAME
	rm -rf /deltafs
	rm -rf /tmp_fs
	rm -rf /apply_changes
}

check_new_files(){
	if [ -d "new-files" ];then
		echo "New files found, processing"
		mkdir /tmp_fs
		cp -rf  ./new-files/* /tmp_fs
		echo "done processing new files"
	fi 
}
check_deltas(){
	if [ -d "delta-files" ];then
		echo "Delta files found, processing"
		mkdir /deltafs
		cp -rf ./delta-files/* /deltafs
		cd /deltafs
		/deltafs/process_deltas
		echo "done processing new files"
	fi 
}
make_backups(){
	return
}

check_updates
